package govt.mbie.calculator.util.listner;

import org.apache.log4j.Logger;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;
import org.testng.Reporter;

import govt.mbie.calculator.util.loghelper.LoggerHelper;

public class ExtentListener implements ITestListener {
	
	// public static ExtentReports extent;
	// public static ExtentTest test;
	private Logger log = LoggerHelper.getLogger(ExtentListener.class);

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test finished
	 * and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test context to get details of running tests name.
	 */
	public void onFinish(ITestContext arg0) {

		// extent.flush();
		Reporter.log(arg0.getName() + " Test Finished..");
		log.info(arg0.getName() + " Test Finished..");

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test start
	 * and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test context to get details of current XmlTest name.
	 */
	public void onStart(ITestContext arg0) {

		// extent = ExtentManager.getInstance();
		// test = extent.createTest(arg0.getName());
		// test = extent.createTest(arg0.getCurrentXmlTest().getName());
		Reporter.log(arg0.getCurrentXmlTest().getName() + " Class Started..");
		log.info(arg0.getCurrentXmlTest().getName() + " Class Started..");

	}

	/**
	 * Unimplemented Method belongs to ITestListener.
	 * execute only if any of the main test(@Test) get skipped.
	 * 
	 * @param arg0 passed to get status of the result.
	 * 
	 */
	public void onTestFailedButWithinSuccessPercentage(ITestResult arg0) {

		// TODO Auto-generated method stub

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test start
	 * and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test result to get details of current method name on
	 *            failure and the throwable that was thrown while running the method, or null if no
	 *            exception was thrown.
	 */
	public void onTestFailure(ITestResult arg0) {

		// test.log(Status.FAIL, arg0.getThrowable());
		Reporter.log(arg0.getMethod().getMethodName() + " Test Failed.." + arg0.getThrowable());
		log.error(arg0.getMethod().getMethodName() + " Test Failed.." + arg0.getThrowable());

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test skipped
	 * and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test result to get details of current method name on
	 *            failure and the throwable that was thrown while running the method, or null if no
	 *            exception was thrown.
	 */
	public void onTestSkipped(ITestResult arg0) {

		// test.log(Status.SKIP, arg0.getThrowable());
		Reporter.log(arg0.getMethod().getMethodName() + " Test Skipped.." + arg0.getThrowable());
		log.warn(arg0.getMethod().getMethodName() + " Test Skipped.." + arg0.getThrowable());

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test start
	 * and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test result to get details of current method name on
	 *            failure and the throwable that was thrown while running the method, or null if no
	 *            exception was thrown.
	 */

	public void onTestStart(ITestResult arg0) {

		// test.log(Status.INFO, arg0.getName()+" started..");
		Reporter.log(arg0.getMethod().getMethodName() + " Test Started..");
		log.info(arg0.getMethod().getMethodName() + " Test Started..");

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test success
	 * and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test result to get details of current method name on
	 *            failure and the throwable that was thrown while running the method, or null if no
	 *            exception was thrown.
	 */
	public void onTestSuccess(ITestResult arg0) {

		// test.log(Status.INFO, arg0.getName()+" Passed..");
		Reporter.log(arg0.getMethod().getMethodName() + " Test Passed..");
		log.info(arg0.getMethod().getMethodName() + " Test Passed..");

	}
}
