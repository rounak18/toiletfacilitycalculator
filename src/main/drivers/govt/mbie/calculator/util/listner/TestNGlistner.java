package govt.mbie.calculator.util.listner;

import org.testng.IInvokedMethod;
import org.testng.IInvokedMethodListener;
import org.testng.ISuite;
import org.testng.ISuiteListener;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestNGMethod;
import org.testng.ITestResult;
import org.testng.Reporter;

public abstract class TestNGlistner
		implements ITestListener, ISuiteListener, IInvokedMethodListener {

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test suit start.
	 * 
	 * @param arg0 passed as an instance of test suite to get details of suite name.
	 */
	public void onTestSuiteStart(ISuite arg0) {

		Reporter.log("About to begin executing Suite " + arg0.getName(), true);

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test suit finish.
	 * 
	 * @param arg0 passed as an instance of test suite to get details of suite name.
	 */
	public void onTestSuiteFinish(ISuite arg0) {

		Reporter.log("About to end executing Suite " + arg0.getName(), true);

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test start.
	 * 
	 * @param arg0 passed as an instance of test to get details of test name.
	 */
	public void onStart(ITestContext arg0) {

		Reporter.log("About to begin executing Test " + arg0.getName(), true);

	}

	/**
	 * Method defined to Report logs included in the HTML reports generated by TestNG on test finish.
	 * 
	 * @param arg0 passed as an instance of test to get details of test name.
	 */
	public void onFinish(ITestContext arg0) {

		Reporter.log("Completed executing test " + arg0.getName(), true);

	}

	/**
	 * Method belongs to ITestListener. execute before the main test pass (@Test).
	 * 
	 * @param arg0 passed to get status of the result.
	 */
	public void onTestSuccess(ITestResult arg0) {

		// This is calling the printTestResults method

		printTestResults(arg0);

	}

	/**
	 * Method belongs to ITestListener. execute before the main test fail (@Test).
	 * 
	 * @param arg0 passed to get status of the result. *
	 */
	public void onTestFailure(ITestResult arg0) {

		// This is calling the printTestResults method
		printTestResults(arg0);

	}

	/**
	 * Method belongs to ITestListener. execute before the main test start (@Test).
	 * 
	 * @param arg0 passed to get status of the result.
	 */
	public void onTestStart(ITestResult arg0) {

		printTestResults(arg0);
		System.out.println("The execution of the main test starts now");

	}

	// This belongs to ITestListener and will execute only if any of the main test(@Test) get skipped

	/**
	 * Method belongs to ITestListener. execute only if any of the main test(@Test) get skipped.
	 * 
	 * @param arg0 passed to get status of the result.
	 * 
	 */
	public void onTestSkipped(ITestResult arg0) {

		printTestResults(arg0);

	}

	/**
	 * Unimplemented Method belongs to ITestListener.
	 * execute only if any of the main test(@Test) get skipped.
	 * 
	 * @param arg0 passed to get status of the result.
	 * 
	 */
	public void onTestFailedButWithinSuccessPercentage(ITestResult arg0) {

	}

	// This is the method which will be executed in case of test pass or fail
	// This will provide the information on the test

	private void printTestResults(ITestResult result) {

		Reporter.log("Test Method resides in " + result.getTestClass().getName(), true);

		if (result.getParameters().length != 0) {

			String params = null;
			StringBuilder param = new StringBuilder();

			for (Object parameter : result.getParameters()) {

				param.append(parameter.toString() + ",");
				params = param.toString();

			}

			Reporter.log("Test Method had the following parameters : " + params, true);

		}

		String status = null;

		switch (result.getStatus()) {

		case ITestResult.SUCCESS:

			status = "Pass";

			break;

		case ITestResult.FAILURE:

			status = "Failed";

			break;

		case ITestResult.SKIP:

			status = "Skipped";

			break;

		default:

			status = "Result for status code " + result.getStatus() + " with corrosponding status not found";

		}

		Reporter.log("Test Status: " + status, true);

	}

	/**
	 * Method belongs to IInvokedMethodListener. execute before every method
	 * including @Before @After @Test Report logs included in the HTML reports generated by TestNG on
	 * test finished and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test to get details of test name.
	 * @param arg1 passed as an instance of test to get details of test name.
	 */
	public void beforeInvocation(IInvokedMethod arg0, ITestResult arg1) {

		String textMsg = "About to begin executing following method : " + returnMethodName(arg0.getTestMethod());

		Reporter.log(textMsg, true);

	}

	/**
	 * Method belongs to IInvokedMethodListener. execute after every method
	 * including @Before @After @Test Report logs included in the HTML reports generated by TestNG on
	 * test finished and to Report logs included in the log4j file reports generated.
	 * 
	 * @param arg0 passed as an instance of test to get details of test name.
	 * @param arg1 passed as an instance of test to get details of test name.
	 */
	public void afterInvocation(IInvokedMethod arg0, ITestResult arg1) {

		String textMsg = "Completed executing following method : " + returnMethodName(arg0.getTestMethod());

		Reporter.log(textMsg, true);

	}

	// This will return method names to the calling function

	private String returnMethodName(ITestNGMethod method) {

		return method.getRealClass().getSimpleName() + "." + method.getMethodName();

	}

}
